same as post order traversal
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<Integer> postorder(Node root) {
        List<Integer> res = new ArrayList<>();
		if (root == null) {
			return res;
		}
		// post-order traversal
		Deque<Node> stack = new LinkedList<Node>();
		// store result
		Deque<Node> temp = new LinkedList<>();
		stack.offerFirst(root);
		while (!stack.isEmpty()) {
			Node cur = stack.pollFirst();
			temp.offerFirst(cur);
            for (int i = 0; i < cur.children.size(); i++) {
                stack.offerFirst(cur.children.get(i));
            }
		}
		// reverse temp = res.
		while (!temp.isEmpty()) {
			res.add(temp.pollFirst().val);
		}
		return res;
    }
}
