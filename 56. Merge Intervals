public class MergeInterval {
	public static class Interval {
		int start; int end;
		Interval() {
			start = 0;
			end = 0;
		}
		Interval(int s, int e) {
			start = s;
			end = e;
		}
	}

	// Sorting:

	public static List<Interval> merge1(List<Interval> intervals) {
		Collections.sort(intervals, new Comparator<Interval>() {
			@Override
			public int compare(Interval a, Interval b) {
				return a.start < b.start ? -1 : a.start == b.start ? 0 : 1;
			}
		});

		LinkedList<Interval> merged = new LinkedList<Interval>();
		for (Interval interval : intervals) {
			// if the list of merged intervals is empty or if the current
			// interval does not overlap with the previous, simply append it.
			if (merged.isEmpty() || merged.getLast().end < interval.start) {
				merged.add(interval);
			}
			// otherwise, there is overlap, so we merge the current and previous
			// intervals.
			else {
				merged.getLast().end = Math.max(merged.getLast().end, interval.end);
			}
		}

		return merged;
	}

	// 扫描线做法：O(nlogn)
	public static List<Interval> merge2(List<Interval> intervals) {
		if(intervals == null || intervals.size() <= 1) return intervals;
		Collections.sort(intervals, (a, b) -> a.start - b.start);
		int start = intervals.get(0).start;
		int end = intervals.get(0).end;
		List<Interval> res = new ArrayList<>();
		for (Interval interval : intervals) {
			if (interval.start <= end) {
				end = Math.max(end, interval.end);
			} else {
				res.add(new Interval(start, end));
				start = interval.start;
				end = interval.end;
			}
		}
		res.add(new Interval(start, end));//key point here dont forget to add this line
		return res;
	}



	public static void main(String[] args) {
		Interval interval1 = new Interval(0, 30);
		Interval interval2 = new Interval(5, 10);
		Interval interval3 = new Interval(15, 20);
		List<Interval> list = Arrays.asList(interval1, interval2, interval3);
		for (Interval item : merge1(list)) {
			System.out.println(item.start + "," + item.end);
		}
		for (Interval item : merge2(list)) {
			System.out.println(item.start + "," + item.end);
		}
	}
}
