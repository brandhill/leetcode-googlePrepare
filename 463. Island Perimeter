class Solution {
    public int islandPerimeter(int[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int result = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) { // 是陆地，开始贡献边数
                    if (i == 0 || grid[i-1][j] == 0) result++; // 陆地左边是水， 或者在最左边， 只能贡献一条边
                    if (i == m-1 || grid[i+1][j] == 0) result++;
                    if (j == 0 || grid[i][j-1] == 0) result++;
                    if (j == n-1 || grid[i][j+1] == 0) result++;
                }
            } 
        }
        return result;
    }
}
// faster!
class Solution {
    public static int islandPerimeter(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;
        int result = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    result += 4;
                    if (i > 0 && grid[i-1][j] == 1) result -= 2;
                    if (j > 0 && grid[i][j-1] == 1) result -= 2;
                }
            }
        }
        return result;
    }
}

i-1, j
i+1, j
i, j+1
i, j-1

but 
i = 0, i-1,j 
j = 0, i, j-1
i = m-1, i+1, j
j = n-1, i, j+1    越界

由此构成了上述判断条件。
