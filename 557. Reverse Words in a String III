// my solution, 1-time AC! but slow.
class Solution {
    public String reverseWords(String s) {
        if (s == null || s.length() == 0) {
            return s;
        }
        String[] str = s.split(" ");
        String result = "";
        for (String each_s : str) {
            result += reverseOneWord(each_s) + " ";
        }
        return result.trim();
    }
    private String reverseOneWord(String s) {
        if (s == null || s.length() == 0) {
            return s;
        }
        int low = 0, high = s.length()-1;
        char[] s_char = s.toCharArray();
        while (low < high) {
            char tmp = s_char[low];
            s_char[low] = s_char[high];
            s_char[high] = tmp;
            low++;
            high--;
        }
        return String.valueOf(s_char);
    }
}
// other better idea: 89.04%, using StringBuilder.reverse() feature.
public class Solution {
    public String reverseWords(String s) {
        String words[] = s.split(" ");
        StringBuilder res=new StringBuilder();
        for (String word: words)
            res.append(new StringBuffer(word).reverse().toString() + " ");
        return res.toString().trim();
    }
}
