// my solution: same as binary tree level order 1, use stack to reverse result or use list.add(0, list);
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (root == null) {
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> level = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode cur = queue.poll();
                level.add(cur.val);
                if (cur.left != null) {
                    queue.offer(cur.left);
                }
                if (cur.right != null) {
                    queue.offer(cur.right);
                }
            }
           res.add(0,level);
        }
        return res;
    }
}

DFS:
public List<List<Integer>> levelOrderBottom(TreeNode root) {
    List<List<Integer>> wrapList = new LinkedList<List<Integer>>();
    levelMaker(wrapList, root, 0);
    return wrapList;
}

public void levelMaker(List<List<Integer>> list, TreeNode root, int level) {
    if(root == null) return;
    if(level >= list.size()) {
        list.add(0, new LinkedList<Integer>());
    }
    levelMaker(list, root.left, level+1);
    levelMaker(list, root.right, level+1);
    list.get(list.size()-level-1).add(root.val);
}
