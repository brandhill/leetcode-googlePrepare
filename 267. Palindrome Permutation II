这个写的很好！https://www.jianshu.com/p/935238e618d4

我们首先用map构造词频，并计算出出现次数为单数的character数目。
例如aaaabbc, a[4], b[2], c
由于出现次数为单数的character数目小于等于1，满足要求。否则直接返回。
将词频除以2，装入list中，此时list = {a, a, b}
palindrome为list的一个perm + mid + 逆序的perm
注意，由于一个character可能出现多次，那么perm的时候排除这种情况：if (i > 0 && list.get(i) == list.get(i - 1) && !used[i - 1]) continue;

public class Solution {
    public List<String> generatePalindromes(String s) {
    int odd = 0;
    String mid = "";
    List<String> res = new ArrayList<>();
    List<Character> list = new ArrayList<>();
    Map<Character, Integer> map = new HashMap<>();

    // step 1. build character count map and count odds
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        map.put(c, map.containsKey(c) ? map.get(c) + 1 : 1);
        odd += map.get(c) % 2 != 0 ? 1 : -1; // 由于出现次数为单数的character数目odd小于等于1，满足要求。否则直接返回。
    }

    // cannot form any palindromic string
    if (odd > 1) return res;

    // step 2. add half count of each character to list
    for (Map.Entry<Character, Integer> entry : map.entrySet()) {
        char key = entry.getKey();
        int val = entry.getValue();

        if (val % 2 != 0) mid += key;

        for (int i = 0; i < val / 2; i++) list.add(key);
    }

    // step 3. generate all the permutations
    getPerm(list, mid, new boolean[list.size()], new StringBuilder(), res);

    return res;
}

// generate all unique permutation from list
void getPerm(List<Character> list, String mid, boolean[] used, StringBuilder sb, List<String> res) {
    if (sb.length() == list.size()) {
        // form the palindromic string
        res.add(sb.toString() + mid + sb.reverse().toString());
        sb.reverse();
        return;
    }

    for (int i = 0; i < list.size(); i++) {
        // avoid duplication
        if (i > 0 && list.get(i) == list.get(i - 1) && !used[i - 1]) continue;

        if (!used[i]) {
            used[i] = true; 
            sb.append(list.get(i));
            // recursion
            getPerm(list, mid, used, sb, res);
            // backtracking
            used[i] = false; 
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}
}
 




my solution, LTE.. use permutation+isPalindrome
class Solution {
    public List<String> generatePalindromes(String s) {
        List<String> res = new ArrayList<>();
        if (s.isEmpty()) {
            res.add(s);
			return res;
		}
        
		boolean[] visited = new boolean[s.length()];
		helper(s, res, "", visited);
		return res;
    }
    private static void helper(String s, List<String> res, String answer, boolean[] visited) {
		if (answer.length() == s.length() && !res.contains(answer) && isPalindrome(answer)) {
			res.add(answer);
			return;
		}
		for (int i = 0; i < s.length(); i++) {
			if (!visited[i]) {
                if (i > 0 && s.charAt(i) == s.charAt(i-1) && visited[i-1]) {
                    return;
                }
                visited[i] = true;
                answer = answer + s.charAt(i);
                helper(s, res, answer, visited);
                visited[i] = false;
                answer = answer.substring(0, answer.length()-1);
			}
		}
	}
	private static boolean isPalindrome(String s) {
		if (s.isEmpty()) {
			return true;
		}
		int low = 0, high = s.length()-1;
		while (low < high) {
			if (s.charAt(low) != s.charAt(high)) {
				return false;
			}
			low++;
			high--;
		}
		return true;
	}
}
