public static List<List<Integer>> subsets(int[] nums) {
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		if (nums == null || nums.length == 0) {
			return res;
		}
		Arrays.sort(nums);  // here sort since question asks for ascending order. 
		dfs(nums, res, new ArrayList<Integer>(), 0);
		return res;
	}
	private static void dfs(int[] nums, List<List<Integer>> res, List<Integer> answer, int level) {
		if (answer.size() <= nums.length) {
			res.add(new ArrayList<>(answer));
		}
		for (int i = level; i < nums.length; i++) { // remember i starts from level.
			answer.add(nums[i]);
			//System.out.println("after add:"+answer + ", i:" + i);
			dfs(nums, res, answer, i+1);
			//System.out.println("after dfs:"+answer + ", i:" + i);
			answer.remove(answer.size()-1);
			//System.out.println("after remove:"+answer + ", i:" + i);
		}
	}
  
debug 过程：  
after add:[1], i:0
after add:[1, 2], i:1
after add:[1, 2, 3], i:2
after dfs:[1, 2, 3], i:2
after remove:[1, 2], i:2
after dfs:[1, 2], i:1
after remove:[1], i:1
after add:[1, 3], i:2
after dfs:[1, 3], i:2
after remove:[1], i:2
after dfs:[1], i:0
after remove:[], i:0
after add:[2], i:1
after add:[2, 3], i:2
after dfs:[2, 3], i:2
after remove:[2], i:2
after dfs:[2], i:1
after remove:[], i:1
after add:[3], i:2
after dfs:[3], i:2
after remove:[], i:2
[[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]
