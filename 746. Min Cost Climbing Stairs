// cost=[10,15,20],到第三层floor，如果想往前走，需要花20.意思是如果想到顶，就要花这个cost。所以例子返回的值是15，从第二层走2步到顶。
1. DP+贪心：
public int minCostClimbingStairs(int[] cost) {
        for (int i = 2; i < cost.length; i++) {
            cost[i] += Math.min(cost[i-1], cost[i-2]); //走一步和走两步 2种方式取最小
        }
        return Math.min(cost[cost.length-1], cost[cost.length-2]);
}
    
2. DP：
class Solution {
    public int minCostClimbingStairs(int[] cost) {
        if (cost == null || cost.length == 0) {
            return 0;
        }
        int last1 = 0;
        int last2 = 0;
        for (int i = cost.length-1; i >=0; i--) {
            int result = cost[i] + Math.min(last1, last2);
            last2 = last1;
            last1 = result;
        }
        return Math.min(last1, last2);
    }
}
