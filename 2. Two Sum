1. brute force:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2]; // make sure initialization style.
        if (nums == null || nums.length == 0) {
            return result;
        }
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {  // make sure i and j are not duplicate
                if (nums[i] == target - nums[j]) {
                    result[0] = i;
                    result[1] = j;
                    return result;
                }
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}

2. 2 for loop with 1 hashmap:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        if (nums == null || nums.length == 0) {
            return result;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
        } 
        for (int j = 0; j < nums.length; j++) {
            int another = target-nums[j];
            if (map.containsKey(another) && map.get(another) != j) {
                result[0] = map.get(another);
                result[1] = j;
                return result;
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}

3. 1 for loop with 1 hashmap:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        if (nums == null || nums.length == 0) {
            return result;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (!map.containsKey(target-nums[i])) {
                map.put(nums[i], i);
            } else {
                result[0] = map.get(target-nums[i]);
                result[1] = i;
                return result;
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}
