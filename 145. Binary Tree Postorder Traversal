1. recursive: DFS
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        if (root == null) {
            return res;
        }
        if(root.left != null) {
            res.addAll(postorderTraversal(root.left));
        }
        if(root.right != null) {
            res.addAll(postorderTraversal(root.right));
        }
        res.add(root.val);
        return res;
    }
}

2. iterative: BFS 。
// offline algorithm： 这个方法不好，space用得太多，需要在内存中存下来整棵树，才能得到结果。time: O(n), space: O(n)
	public List<Integer> postOrder(TreeNode root) {
		List<Integer> res = new ArrayList<>();
		if (root == null) {
			return res;
		}
		// post-order traversal
		Deque<TreeNode> stack = new LinkedList<TreeNode>();
		// store result
		Deque<TreeNode> temp = new LinkedList<>();
		stack.offerFirst(root);
		while (!stack.isEmpty()) {
			TreeNode cur = stack.pollFirst();
			temp.offerFirst(cur);
			if (root.left != null) {
				stack.offerFirst(root.left);
			}
			if (root.right != null) {
				stack.offerFirst(root.right);
			}
		}
		// reverse temp = res.
		while (!temp.isEmpty()) {
			res.add(temp.pollFirst().val);
		}
		return res;
	}
     

//Iterative: from laioffer推荐

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
		if (root == null) {
			return res;
		}
		Deque<TreeNode> stack = new LinkedList<>();
		TreeNode prev = null;
		stack.offerFirst(root);

		while (!stack.isEmpty()) {
			TreeNode cur = stack.peekFirst();  //先看一眼当前节点
			// go down
			if (prev == null || cur == prev.left || cur == prev.right) {  //cur是prev的孩子
				if (cur.left != null) {
					stack.offerFirst(cur.left);
				} else if (cur.right != null) {
					stack.offerFirst(cur.right);
				} else {
					res.add(cur.val);
					stack.pollFirst();
				}
			} else if (prev == cur.left) {
				// from left subtree
				if (cur.right != null) {
					stack.offerFirst(cur.right);
				} else {
					res.add(cur.val);
					stack.pollFirst();
				}
			} else {
				// from right subtree
				res.add(cur.val);
				stack.pollFirst();
			}
			prev = cur;  //向前走一步
		}
		return res;
    }
}
