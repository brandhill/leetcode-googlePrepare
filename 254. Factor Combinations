1. DFS:
class Solution {
  // 如果要求1 也是因数之一，在最开始就加上这个结果<1, n> 到res中。
    public List<List<Integer>> getFactors(int n) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if (n <= 0) {
            return res;
        }
        dfs(n, res, new ArrayList<Integer>(), 2);  // 注意这里从2开始
        return res;
    }
    private void dfs(int n, List<List<Integer>> res, List<Integer> answer, int level) {
        if (n <= 1) {
            if (answer.size() > 1) {
                res.add(new ArrayList<>(answer));
            }
            return;
        }
        
        for (int i = level; i <= n; i++) {
            if (n%i == 0) {
                answer.add(i);
                dfs(n/i, res, answer, i);
                answer.remove(answer.size()-1);
            }
        }
    }
}

2. iterative:
public static List<List<Integer>> getFactorsIterative(int n) {
		List<List<Integer>> res = new ArrayList<>();
		if (n <= 3){
			return res;
		}
		Deque<Integer> stack = new ArrayDeque<>();
		int x = 2;
		do {
			if(x > n / x){
				List<Integer> cur = new ArrayList<>(stack);
				cur.add(n);
				res.add(cur);
				x = stack.removeFirst();
				n *= x;
				x++;
			} else if (n % x == 0){
				stack.addFirst(x);
				n /= x;
			} else {
				x++;
			}
		} while (!(x > n / x && stack.size() == 0));
		return res;
	}
