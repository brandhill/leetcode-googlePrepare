class Solution {
    public boolean buddyStrings(String A, String B) {
        if (A.length() == 0 && B.length() == 0) {
            return false;
        }
        if (A.length() == 0 || B.length() == 0) {
            return false;
        }
        if (A.length() != B.length()) {
            return false;
        }
        // check whether A == B,
        // if so, check 是否字符串A中有重复字符,如果有，返回TRUE
        // else 
        if (A.equals(B)) {
            int[] count = new int[26];
            for (int i = 0; i < A.length(); ++i) {
                count[A.charAt(i) - 'a']++;
            }
            for (int c: count) {
                if (c > 1) {
                    return true;
                }
            }
            return false;
        } else {
            int first = -1, second = -1;
            for (int i = 0; i < A.length(); ++i) {
                if (A.charAt(i) != B.charAt(i)) {
                    if (first == -1) {
                        first = i;
                    } else if (second == -1) {
                        second = i;
                    } else {
                        return false;
                    }
                }
            }

            return (second != -1 && A.charAt(first) == B.charAt(second) &&
                    A.charAt(second) == B.charAt(first));
        }
    }
}

// another solution:
public boolean buddyStrings(String A, String B) {
        // two case: 1.A == B and A has duplicate 2. A != B only one different pair i and j
        if (A.length() != B.length()) return false;
        char[] sA = A.toCharArray();
        char[] sB = B.toCharArray();
        int[] dictA = new int[26];
        int[] dictB = new int[26];
        int len = sA.length;
        int diff = 0;
        for (int i = 0; i < len; i++) {
            dictA[sA[i] - 'a'] ++;
            dictB[sB[i] - 'a'] ++;
            if (sA[i] != sB[i]) diff++;
            
        }
        boolean hasDup = false;
        for (int i = 0; i < 26; i++) {
            if (dictA[i] != dictB[i]) return false;
            if (dictA[i] >= 2) hasDup = true;
        }
        return diff == 2 || (diff == 0 && hasDup);
    }
